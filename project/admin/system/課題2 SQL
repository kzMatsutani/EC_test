CREATE TABLE product (
id SERIAL PRIMARY KEY,
name TEXT,
sub_name TEXT,
day SMALLINT UNSIGNED,
price SMALLINT UNSIGNED,
img TEXT,
description TEXT,
created_at TIMESTAMP(6) DEFAULT CURRENT_TIMESTAMP(6),
updated_at TIMESTAMP(6) NULL DEFAULT NULL,
delete_flg  BOOLEAN DEFAULT FALSE
);


CREATE TABLE m_payment (
id SERIAL PRIMARY KEY,
name TEXT,
class TEXT
);

CREATE TABLE product_payment (
product_id BIGINT UNSIGNED NOT NULL,
payment_id BIGINT UNSIGNED NOT NULL
);

CREATE TABLE product_payment (
product_id BIGINT UNSIGNED NOT NULL,
payment_id BIGINT UNSIGNED NOT NULL,
PRIMARY KEY(product_id, payment_id)
);


CREATE TABLE product_payment (
product_id BIGINT UNSIGNED NOT NULL,
payment_id BIGINT UNSIGNED NOT NULL,
FOREIGN KEY (product_id)
REFERENCES product(id)
ON DELETE CASCADE,
FOREIGN KEY (payment_id)
REFERENCES m_payment(id)
ON DELETE CASCADE
);


INSERT INTO m_payment VALUES (1, '各種クレジットカード決済', 'fa-credit-card');
INSERT INTO m_payment VALUES (2, '代金引換', 'fa-money');
INSERT INTO m_payment VALUES (3, '銀行振込前払い', 'fa-university');
INSERT INTO m_payment VALUES (4, '郵便振替前払い', 'fa-envelope-o');


INSERT INTO products (name, sub_name, day, price, description) VALUES ('冬瓜ダイエット', 'TOGAN DIET', 15, 15000, 'とりあえず試してみたいあなたに');
INSERT INTO products (name, sub_name, day, price, description) VALUES ('とうがん', 'togan', 5, 5000, 'ほんますごい');
INSERT INTO products (name, sub_name, day, price, description) VALUES ('ダイエット', 'DIET', 30, 30000, 'まじですごい');

INSERT INTO product_payment (product_id, payment_id) VALUES (4,1);
INSERT INTO product_payment (product_id, payment_id) VALUES (2,2);
INSERT INTO product_payment (product_id, payment_id) VALUES (3,3);
INSERT INTO product_payment (product_id, payment_id) VALUES (3,4);
INSERT INTO product_payment (product_id, payment_id) VALUES (1,1);
INSERT INTO product_payment (product_id, payment_id) VALUES (1,1);

DELETE FROM product_payment WHERE product_id = 1;
DELETE FROM product WHERE id = 2;
DELETE FROM m_payment WHERE id = 5;





SELECT pr.id, pr.name, pr.sub_name, pr.day, pr.price, pr.img, pr.description, pr.created_at, pr.updated_at
FROM product pr
LEFT JOIN product_payment pp ON pr.id = pp.product_id
LEFT JOIN m_payment mp ON pp.payment_id = mp.Id
WHERE pp.payment_id = 2
GROUP BY pr.id

SELECT pr.id, pr.name, pr.sub_name, pr.day, pr.price, pr.img, pr.description, pr.created_at, pr.updated_at
FROM product pr ,
product_payment pp
WHERE pr.id = pp.product_id
AND pp.payment_id IN(2 , 3)
GROUP BY pr.id


ssh -p 22 ebauser@iki-337-28653.vs.sakura.ne.jp

SELECT pr.id, pr.name, pr.sub_name, pr.day, pr.price, pr.img, pr.description, pr.created_at, pr.updated_at
FROM product pr ,
product_payment pp
WHERE pr.id = pp.product_id
IN ( SELECT * FROM product_payment WHERE )
GROUP BY pr.id

SELECT * FROM product pr, product-payment pp WHERE delete_flg= 0 AND pp.payment_id IN (1)

. ' CASE '
    . $column
. ' WHEN '
    . ' NULL THEN 1 '
. ' WHEN '
    . ' '' THEN 2 '
. ' WHEN '
    . $sort
. ' END '

SELECT * FROM product WHERE delete_flg = 0 ORDER BY CASE name WHEN NULL THEN 999 WHEN '' THEN 999 ELSE END 0


SELECT * FROM product_payment WHERE payment_id = 1 OR payment_id = 3
SELECT * FROM product_payment WHERE payment_id = 1 or payment_id =3 GROUP BY product_id


SELECT  AUTO_INCREMENT
FROM  INFORMATION_SCHEMA.TABLES
WHERE TABLE_SCHEMA = 'k_matsutani'
AND   TABLE_NAME   = 'product'



   //商品データ単体の支払情報の取得
    public function payment($id)
    {
        try {
            //データベースに接続
            parent::connect();
            //商品のデータを取得
            $sql =
            ' SELECT '
                . ' pp.product_id , '
                . ' mp.name , '
                . ' mp.class '
            . ' FROM '
                . ' m_payment mp  '
            . ' LEFT OUTER JOIN '
                . ' product_payment pp '
            .' ON '
                .  ' pp.product_id = ? '
            .' AND '
                .  ' mp.id = pp.payment_id '
            ;
            $stmt = $this->dbh->prepare($sql);
            $stmt->execute([$id]);
            $payment = $stmt->fetchAll();
             return $payment;
        } catch (PDOException $e) {
            var_dump($e);
        }
    }



<li>
    <label><input type="checkbox" name="payment[]" value="1" <?=isset($payment['product_id']) ? 'checked' : ''?>>各種クレジットカード払い</label>
    <label><input type="checkbox" name="payment[]" value="2" <?=isset($payment['product_id']) ? 'checked' : ''?>>代金引換</label>
</li>
<li>
    <label><input type="checkbox" name="payment[]" value="3" <?=isset($payment['product_id']) ? 'checked' : ''?>>銀行振込前払い</label>
    <label><input type="checkbox" name="payment[]" value="4" <?=$payment1['product_id'] == 4 ? 'checked' : ''?>>郵便振替前払い</label>
</li>



<td>
    <li>
        <label><input type="checkbox" name="payment[1]" value="1" <?=isset($_GET['payment'][1]) ? 'checked': ''?>>各種クレジットカード払い</label>
        <label><input type="checkbox" name="payment[2]" value="2" <?=isset($_GET['payment'][2]) ? 'checked': ''?>>代金引換</label>
    </li>
    <li>
        <label><input type="checkbox" name="payment[3]" value="3" <?=isset($_GET['payment'][3]) ? 'checked': ''?>>銀行振込前払い</label>
        <label><input type="checkbox" name="payment[4]" value="4" <?=isset($_GET['payment'][4]) ? 'checked': ''?>>郵便振替前払い</label>
    </li>
</td>





//商品支払い情報の更新
    public function updatePayment($id = NULL, $payment)
    {
        try {
            //データベースに接続
            parent::connect();
            //一度指定商品の支払い方法の削除
            $sql =
                ' DELETE '
                . ' FROM  '
                    . ' product_payment '
                . ' WHERE '
                    . ' product_id = ? '
                ;
            $stmt = $this->dbh->prepare($sql);
            $stmt->execute([$id]);
            //商品の支払い情報の再登録
            if (in_array('1', $payment) || in_array('2', $payment) || in_array('3', $payment) || in_array('4', $payment)) {
                foreach ($payment as $pay) {
                    $sql =
                        ' INSERT INTO '
                            . ' product_payment '
                            . ' ( '
                            . ' product_id , '
                            . ' payment_id '
                            . ' ) '
                        . ' VALUES '
                            . ' ( '
                            . ' ? ,'
                            . ' ? '
                            . ' ) '
                        ;
                    $stmt = $this->dbh->prepare($sql);
                    $stmt->execute([$id, $pay]);
                }
            }
        } catch (PDOException $e) {
            echo '商品支払い情報の更新にエラーが発生しました 管理者に連絡をお願いします';
        }
    }



    public function editProduct($name, $sub_name, $day, $price, $img, $description, $id)
    {
        try {
            //データベースに接続
            parent::connect();
            //商品のデータを取得
            $sql =
            ' UPDATE '
                . ' product  '
            . ' SET '
                . ' name = ? , '
                . ' sub_name = ? ,  '
                . ' day =  ? , '
                . ' price =  ? , '
                . ' img =  ? , '
                . ' description = ? , '
                . ' updated_at = NOW() '
            . ' WHERE '
                . ' id = ? '
            ;
            $stmt = $this->dbh->prepare($sql);
            $stmt->execute([$name, $sub_name, $day, $price, $img, $description, $id]);
        } catch (PDOException $e) {
            echo '商品編集にエラーが発生しました 管理者に連絡をお願いします';
        }
    }



>>const.php
>>定数名だけど、IMAGE_PATHもPRODUCTの画像ディレクトリだし、今後他の機能で定数作る時に命名に困ると思うから、MAIN_PRODUCT_IMAGE_PATHと併せて名前の見直しをしてほしい。
>>あと、ABSOLUTE_PRODUCT_IMAGE_PATHも同じくパスを定義してるのに、これだけPATHがないのはおかしい。
管理側のIMAGEパスをADMIN_PRODUCT_IMAGE_PATHに、メイン側をMAIN_PRODUCT_IMAGE_PATHに、絶対パスをABSOLUTE_PRODUCT_IMAGE_PATHに変更しました。

>>Product.php
>>5行目　メソッド名だけど、productListをどうするメソッドなのかが分からない。
>>命名の仕方とかネットで調べれば出てくると思うから（多分サイトによってそれぞれだとは思うけど）、何のためのメソッドなのかが分かるような名前にしてほしい。他のメソッドも同様。
メソッド名からどういう働きをするメソッドなのかを推測出来るようなメソッド名に変更しました。

>>9～24行目　インデントがおかしい。全部見たわけじゃないけど、SQL文書いてあるところ全部おかしい気がする。
一通り見直し修正しました。

>>43、44行目　fetchAllした結果を返すのに、一旦$productsに入れてるのって理由ある？他にも同様の箇所あり。
fetchAllを直接リターンするように修正しました。

>>92行目　今は1～4までしかないけど、もっと増えた時に、例えば10個になった時に条件を10個書かなきゃいけないし、その都度ソースを編集しなきゃいけなくなる。
>>だから、93行目のforeachの中で判定するのが自然かな。
>>あと、1～4というのをベタで書いてるけど、その1～4というのはどこからか取得するようにしてほしい。
>>他にも何ヵ所か同じような処理があるから、見直してほしい。
支払い方法を取得する自作関数で支払い方法の全IDを取得し、そちらをfoerachで展開しin_arrayでバリデーションを行うよう変更しました。

>>147行目　検索条件ってproduct_id1個だけだから、わざわざ配列に格納する意味ないと思う。
全くそのとおりで配列である必要やforで展開する理由が全く無かったため修正しました。条件検索の次に行ったため同じように書いてしまいました。

>>161行目　ANDだと結合の条件になってると思うんだけど、これで平気？
CASE WHENとサブクエリを 使用して全支払い方法と対応した支払い方法のstatusを取得出来るようにSQL文を変更しました。

>>exceptionをcatchした時ってechoでOK？
catchしたあとはエラー画面に遷移するように変更しました。

>>あと、半角スペースがおかしいところがちょいちょいあるかな。
変数やカンマの後のスペースの有無を見直し修正しました。




//商品の支払情報の取得
    public function payment($id = NULL)
    {
        try {
            //データベースに接続
            parent::connect();
            $sql =
                ' SELECT '
                    . ' * '
                . ' FROM '
                    . ' m_payment mp  '
            ;
            if (!empty($id)) {
                $sql .=
                    ' LEFT JOIN '
                        . ' product_payment pp '
                    .' ON '
                        .  ' mp.id = pp.payment_id '
                    . ' WHERE '
                        . ' pp.product_id = ? '
                    . ' ORDER BY '
                        . ' mp.id '
                ;
                $stmt = $this->dbh->prepare($sql);
                $stmt->bindValue(1, $id, PDO::PARAM_INT);
                $stmt->execute();
                return $stmt->fetchAll();
            }
            $stmt = $this->dbh->prepare($sql);
            $stmt->execute();
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            echo '支払い方法の取得にエラーが発生しました 管理者に連絡をお願いします';
        }
    }


' SELECT '
    . ' mp.id , '
    . ' mp.name , '
    . ' mp.class , '
 . ' CASE ( '
    . ' SELECT '
        . ' product_id '
    . ' FROM '
        . ' product_payment '
    . ' WHERE '
        . ' product_id '
        . ' = 3 '
. ' ) WHEN '
    . ' = mp.id '
    . ' THEN 1 '
    . ' ELSE 0 '
. ' END AS status '
. ' FROM '
    . ' m_payment mp '
;

まず支払い方法全てを取得しforeacheで展開。
その次に


<!-- <?php foreach ($payment as $pay):?>
                                    <label><input type="checkbox" name="paymentNums[]" value="<?=$pay['id']?>" <?=in_array($pay['id'] , $paymentNums)? 'checked' : ''?>><?=$pay['name']?></label>
                                <?php endforeach;?> -->


SELECT mp.id , mp.* ,
CASE WHEN (SELECT product_id FROM product_payment WHERE product_id = 1)
= mp.id THEN 1  ELSE 0
END AS status
FROM
m_payment mp

SELECT pp.product_id FROM product_payment pp WHERE pp.product_id = 1

SELECT mp.id , mp.* ,
CASE WHEN (SELECT product_id FROM product_payment WHERE product_id = 1)
= mp.id THEN 1  ELSE 0
END AS status
FROM
m_payment mp


 //商品の支払情報の取得
    public function pay($id = NULL)
    {
        try {
            //データベースに接続
            parent::connect();
            $sql =
                ' SELECT '
                    . ' * '
                . ' FROM '
                    . ' m_payment mp  '
            ;
            if (!empty($id)) {
                $sql .=
                    ' LEFT JOIN '
                        . ' product_payment pp '
                    .' ON '
                        .  ' mp.id = pp.payment_id '
                    . ' WHERE '
                        . ' pp.product_id = ? '
                    . ' ORDER BY '
                        . ' mp.id '
                ;
                $stmt = $this->dbh->prepare($sql);
                $stmt->bindValue(1, $id, PDO::PARAM_INT);
                $stmt->execute();
                return $stmt->fetchAll();
            }
            $stmt = $this->dbh->prepare($sql);
            $stmt->execute();
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            echo '支払い方法の取得にエラーが発生しました 管理者に連絡をお願いします';
        }
    }


>>const.php
>>商品画像のパスだけど、今度は商品であることが分からないから、少し長くなっちゃうかもしれないけど、商品画像の格納ディレクトリであることが分かる名前にしてほしい。
>>あと絶対パスだけど、基本的に体言止めにしたいから、ABSOLUTEは最後じゃない方がいいかな。
画像のパスをADMIN_PRODUCT_IMAGE_PATH、MAIN_PRODUCT_IMAGE_PATH、ABSOLUTE_PRODUCT_IMAGE_PATHに変更しました。

>>Product.php
>>16、17行目  getProductListで取得する商品情報は、初期表示だと登録が新しい順に表示してほしい。
ソート条件がなかった場合は登録が新しい順に並ぶようにsqlを追加しました。

>>93～99行目　仮に支払方法が100種類あって、選択したのが1個だったとしても100回ループ処理をすることになる。コード見る限り$paymentには選択された支払方法のidが入ってるはずだから、こっちをメインに考えてほしい。
POST値が入っている$payment配列をforeachで展開して取得したリストと照合する方法に修正しました。

>>113行目　-の前に半角スペースを付けるなら、後にも付けるようにしてほしい。
-の後にも半角スペースを追加しました。

>>151、152行目　PDO::FETCH_UNIQUEするためにidと*を分けてると思うんだけど、取得した配列のキーがidになるなら、値の方にidはいらないはずだし、そんなにカラム数多くないから*じゃなくてもいい。
mp.idの取得をやめて、mp.*のみの取得に修正しました。修正に伴いvalueでidを展開していた箇所をkey名で展開するように変更しました。

>>153～167行目　インデントがおかしいかな。
CASE WHENやサブクエリ辺りのインデントを変更しました。

>>164行目　mp.idと比較してるけど、逆にどの場合に0になるかを考えた方がいいかな。更に言ってしまうと、サブクエリでデータが取得できた場合には必ずmp.idと一致するはず。
CASE WHEN内のSELECT文は取得出来なかった時点でELSE 0 の選択になっていたため = mp.idの記述を消しました。

>>213～232、269～288行目　ここも93～99行目と同じ。
同様に修正しました。

>>INSERT文の改行やインデントがちょっと微妙かな・・・ひょっとしたらサイトによって書き方まちまちかもしれないけど。
INSERT文の改行やインデントを修正しました。INSERT INTOの後のテーブル名を改行しようか悩みましたが、カラム名とVALUES内の?のインデントを合わせやすいようにINSERTとテーブル名を同行にしました。

>>product_list.php
>>16、17行目  getProductListの引数に=nullを指定してたはずだから、三項演算子の後ろが空文字はおかしい。
>>検索結果0件だとエラー画面に行くと思うんだけど、取得結果0件はエラーじゃない。
取得結果0件の場合(array())はif内の式が成立しない(falseになる)ということを確認しておりませんでした。
if条件に!is_array() を追加して、取得したデータが配列でない場合にエラー画面に遷移するように修正しました。

>>97～107行目わざわざtableにしなくてもいいかな。やろうとしてることは支払方法2個ごとに改行しようとしてる、ってレベルのことだと思うし、わざわざ縦位置合わせなくてもいいと思う。
>>100～106行目　インデントがおかしい。
テーブル要素をやめて、インデントを修正しました。

>>管理画面全般だと思うけど、共通のヘッダー、フッターは外部ファイルにして、各ページで呼び出すようにしてほしい。
templateフォルダを作成しその中にヘッダー、フッターphpファイルを作成。それを各ページで呼び出すことにしました。

>>util.inc.php
>>getPage、getErrorMessageAdminについては、口頭で話した通り。
getPage()に関しては取得したURIを3つのワードに分けて、各ワードを対象の配列と照らし合わせてページ名を返すことにしました。
getErrorMessageAdminはエラー文とエラー内容を定数に設定しました。

<!-- ヘッダー -->
<?php require_once('./template/header.php')?>
<!-- フッター -->
<?php require_once('./template/footer.php')?>


 SELECT
                mp.id ,
                mp. * ,
                CASE WHEN (
                    SELECT
                        payment_id
                    FROM
                        product_payment
                    WHERE
                        product_id
                        = ?
                    AND
                    mp.id = payment_id
                )
                    = mp.id
                    THEN 1
                    ELSE 0
                END AS status
                FROM
                    m_payment mp

SELECT mp.id , mp.* , CASE WHEN
( SELECT payment_id FROM product_payment WHERE product_id = 5 AND mp.id = payment_id)
= mp.id THEN 1 ELSE 0 END AS status FROM m_payment mp;

SELECT
    mp.* ,
    CASE
        WHEN (
            SELECT
                payment_id
            FROM
                product_payment
            WHERE
                product_id = ?
            AND
                mp.id = payment_id
        ) THEN 1
        ELSE 0
    END AS status
FROM
    m_payment mp



例1
INSERT INTO
    product_payment
VALUES (
    ? ,
    ?
)


例2
INSERT INTO
    product_payment (
        product_id ,
        payment_id
    )
    VALUES (
    ? ,
    ?
    )

例3
INSERT INTO product_payment (
    product_id,
    payment_id
)
VALUES(
    ?,
    ?
)

//トランザクション開始
$this->dbh->exec('SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED');
$this->dbh->beginTransaction();
$this->dbh->commit();
$this->dbh->rollback();

$sql =
                ' SELECT '
                    . ' AUTO_INCREMENT '
                . ' FROM '
                    . 'INFORMATION_SCHEMA.TABLES '
                . ' WHERE '
                    . ' TABLE_SCHEMA = \'k_matsutani\' '
                . ' AND '
                    . ' TABLE_NAME = \'product\' '
            ;
            $insertId = $this->dbh->query($sql)->fetch();




>>error.php
>>このページも共通ヘッダー、共通フッターファイルを呼び出す形にしてほしい。
見落としておりました。ヘッダー、フッターともに共通ファイルから呼び出しました。

>>Product.php
>>99～104行目　インデントがおかしい。他にもおかしい箇所あり。
全体を見直してインデント修正を行いました。

>>152行目　$idがnullの場合ってある？
商品個別の支払い方法を取得する以外に全ての支払い方法を取得する時にもこの関数を使用しています。全ての支払い方法を取得するときには引数を入れてないため初期値をnullとしました。

>>updateProductやcreateProductの引数になってる$payment_numsってpaymentテーブルのid => 1の配列だと思うんだけど、product_editの方でこの配列の組み方を考え直してほしいかな。
>>というのも、paymentテーブルのid、つまりはPOSTで渡される情報がvalueの方にあるのが自然かなと。
>>例えば$_POST['name'] = 'hoge'の場合はPOSTで渡って来たnameがhogeって解釈で、欲しい情報が=の後の方だけど、$_POST['payment_nums'][1] 1ってなると、欲しい情報がkeyの方になってしまう。
>>説明下手で申し訳ないけど・・・
ご相談したときにvalueの値を現在の状態と捉えることにした為そのままです。

>>product_list
>>19、24、32行目　判定方法がis_arrayというのは微妙かな・・・他のファイルも同様。
>>返り値はデータの配列、空の配列、falseの3種類だと思うから間違えてはいないんだけど、取得に「失敗」した場合って意味合いで考えると、falseの場合に弾くっていうのが自然だと思う。
=== falseで判定をするように変更しました。


>>ヘッダーだけ外部ファイルにしてるけど、&lt;html&gt;から&lt;body&gt;までもほぼ同じな訳だから、そこもheader.phpに含めていいと思う。
>>titleも正直全ページで同じでいいと思ってるくらいだし。もし出し分けるなら変数使って出し分けられる。
<html>から<body>もヘッダーテンプレートに 加えました。またタイトルの一部をgetPage()で表示するようにしました。

>>111行目　メッセージが微妙かな・・・というのも「対象」っていうのが引っかかって、検索した場合には分かるんだけど、初期表示の時の「対象」って何なんだろうと思って。
>>もし明確な理由があるのであればそのままでもいいと思うので、教えてください。
自分もこの文を入れた時に全検索した時にヒットしなかった時に違和感があるとは思っていましたが、そのままにしてしまっていました。　
「データが見つかりませんでした」に変更しました。

>>util.inc.php
>>53行目　$_GET['type'] 'none'っていうのがあるから要素になってるんだと思うんだけど、$_GET['type']がいらない時にも便宜上定義してる感じ？
>>いらないんだったらない方がいいかな。
'none'をなくして空文字に変更しました。

>>getPageって色んな考え方、やり方があると思うんだけど、今回はproduct_listだけど、例えばnew_info_listみたいにアンダーバーが複数あってもうまくいく方法で考えてほしい。うまくいく？
explode関数を使用してアンダーバーごとに配列に分配し、topやerror、productなどの最初のワードは必ず出力。配列に入ったものはforで展開し文字列演算子でつなげていき出力しました。

>>41～46行目　47～49行目とまとめられないかな？パッと思っただけだけど。
こちらも上記の方法で一緒にまとめました

>>95、96行目　array_key_existsを使わなくても、有無判定で96行目の1行のみでいけない？
array_key_existsをやめて存在判定!emptyにしました。
あまりarray_key_existsを信用してはいけないということで、ほか箇所(Product.php)で使用していたのも!empty判定に変更しました。

>>editからconf、doneの流れなんだけど、まずconfで登録、更新処理をしてるのはおかしい。
>>例えばログイン画面の場合は認証失敗してるのにtopに一旦入るのはおかしいから、formのactionを自画面にしてheaderでtopに飛ばしてるけど、登録、更新処理だと意味合いが違うかな。
confではなくdoneで登録、更新処理を行うよう修正しました。

>>あと、product_editの31行目の$item、これってDBから持ってきた場合にはその配列を、POSTがあった場合にはPOSTを代入してると思うんだけど、2つの配列の各項目のキーは同じだから、合体させる方法がある。調べてみてね。
編集のときはarray_merge関数を使用して結合、新規登録の場合は$_POSTをそのまま代入するように修正しました。

>>この辺を見直してからじゃないとedit、conf、doneの各ページのレビュー出来ないと思うから、一旦ここまでで！



<?php foreach ($payment as $key => $value):?>
                                    <?php if (!empty($_POST['payment_nums'])): ?>
                                        <?php $value['status'] = isset($_POST['payment_nums'][$key]) ? 1 : ''; ?>
                                    <?php endif;?>
                                    <label><input type="checkbox" name="paymentNums[<?=$key?>]" value="1" <?=$value['status'] == 1 ? 'checked' : ''?>><?=$value['name']?></label>
                                <?php endforeach;?>


10/6日キープ
//商品の支払情報の取得
    public function getPaymentList($id = NULL)
    {
        try {
            //データベースに接続
            parent::connect();
            $sql =
                ' SELECT '
                    . ' mp.* , '
                    . ' CASE '
                        . ' WHEN ( '
                            . ' SELECT '
                                . ' payment_id '
                            . ' FROM '
                                . ' product_payment '
                            . ' WHERE '
                                . ' product_id = ? '
                            . ' AND '
                                . 'mp.id = payment_id '
                        . ' ) THEN 1 '
                        . ' ELSE 0 '
                    . ' END AS status '
                . ' FROM '
                    . ' m_payment mp '
            ;
            $stmt = $this->dbh->prepare($sql);
            $stmt->execute([$id]);
            return $stmt->fetchAll(PDO::FETCH_ASSOC | PDO::FETCH_UNIQUE);
        } catch (PDOException $e) {
            return false;
        }
    }


<?php foreach ($payment as $payment):?>
                                    <?php if (!empty($_POST['payment_nums'])): ?>
                                        <?php $payment['status'] = isset($_POST['payment_nums'][$payment['id']]) ? 1 : ''; ?>
                                    <?php endif;?>
                                    <label><input type="checkbox" name="payment_nums[<?=$payment['id']?>]" value="1" <?=$payment['status'] == 1 ? 'checked' : ''?>><?=$payment['name']?></label>
                                <?php endforeach;?>




<input type="hidden" name="payment_nums[<?=$key?>]" value="0">

foreach ($payment_nums as $key => $value) {
                if ($value == 1) {
                    if (array_key_exists($key, $payment)) {
                        $sql =
                            ' INSERT INTO product_payment '
                            . ' VALUES ( '
                                . ' ? ,'
                                . ' ? '
                            . ' ) '
                        ;
                        $stmt = $this->dbh->prepare($sql);
                        $stmt->execute([$id, $key]);
                    }
                }
            }


$type = $type_word[isset($_GET['type']) ? $_GET['type'] : ''];
    $word = explode('_', $path['filename']);
    $other = '';
    for ($i = 1; $i < count($word); $i++ ) {
        $other .= $second_word[$word[$i]];
    }
    echo $first_word[$word[0]] . $type . $other;


//エラー画面に表示するエラーメッセージの作成(アドミン)
function getErrorMessageAdmin($word)
{
    printf(ERROR_MESSAGE['fail'], !empty(ERROR_WORD[$word]) ? ERROR_WORD[$word] : ERROR_WORD['other']);
}
//エラー画面に表示するエラーメッセージの作成(ユーザー)
function getErrorMessageUser($message)
{
    echo !empty(ERROR_MESSAGE[$message]) ? ERROR_MESSAGE[$message] : ERROR_MESSAGE['other'];
}


>>Product.php
..311、312行目　$iamage_pathと$nameの2つの変数があるけど$nameの方使ってないから、1行にまとめられるよね？
$name = を $image_path =に修正しました。

>>product_list.php
>>前回指摘したの全部「=== false」になってるけど、例えば24行目だと1個も取れなかった場合（マスタデータなし。まあこんなことないとは思うけど）はfalseじゃないけどエラーにしなきゃいけないから、 === falseと!を使い分けてほしい。
0件取得が考えられる場合は=== falseに、0件取得が本来ありえないような場合は!()に修正しました。

>97行目　:の前に半角スペース付けるなら、foreachの後にも半角スペース付けた方がいい。
制御構文のスペースを意識しておりませんでした、コーディング規約のPSR-2を確認したところ「制御構造の開始時は、その後に１スペースを開けなければなりません」とあったのでifなども含めて全箇所スペースを開けるように修正しました

>>util.inc.php
>>getPage　例えばnew_info_listのようにアンダーバーが複数ある場合にうまくいかないんじゃないかな？
最後のアンダーバーからURIを2つに区切り、それぞれのワードを取得するように修正しました。

>>product_edit.php
>>30行目　再編集かどうかの分岐はいらない。初期表示なら$_POSTが空の状態で存在するし、新規登録の初期表示の場合は$itemは存在しないけど、その場合も$itemを空配列で初期化しておけばうまくいくはず。
>>その場合array_mergeだとうまくいかないとは思うけど。
+演算子で結合するように修正しました。

>>42行目　enctype="multipart/form-data"っている？
こちらではファイル送信をしておらず必要がありませんでしたので消しました。

>>70行目　30行目の修正がうまくいけば、ここもこの分岐がいらなくなる。そもそも綴りが間違えてるから、今うまくいってないと思うけど・・・
支払い方法の選択の有無をDBから取得したときもPOSTで取得したときも$selected_payment配列に置き換えるように修正しました。

>>83行目　isset($error) && $error !== trueって書いてあるけど、これって$errorの有無判定のみでいけない？厳密には有無判定の仕方が変わるけど。
画像アップロードは正常な働きをした場合は$errorに「true」を返していましたが「''」に変更し、!empty($error)に変更しました。

>>85行目　インデントがおかしい。
インデントの修正を行いました。

>>product_conf.php
>>7行目　$_POST['id']でもできるとは思うんだけど、そもそもidってGETから取得しているものだから、GETの方がいい。
GETに変更しようと思いましたが、そもそも全ての支払い方法を取得しているだけでしたので引数なしに修正しました。

>>58行目　ここって$_POST['payment_nums']をforeachして出来ない？
>>というのも支払方法マスタに例えば10個支払方法が入ってて、選択した支払方法が1個だった時に、10回中9回のループが無駄な処理になるから、少ない方をforeachした方がいい。
POSTで送信された支払い方法をforeachで展開するように修正しました。

>>conf、doneではパラメータ不正のチェックを行ってほしい。
>>例えば編集時に$_GETのidに紐づく商品情報が存在しないとか、URLいじったりF12で値いじった時に不正なパラメータになってしまう場合にはエラー画面に飛ばす。
typeのGETパラメータがcreate、updateではない場合はエラー画面へ遷移。
typeがupdateの時にIDのGETパラメータが空の場合、GETパラメータのIDから商品データが取得出来なかった場合はエラー画面へ遷移するように修正しました。




>>util.inc.php
>>validateProductEdit、バリデーションチェックをしてるわけじゃなくてパラメータチェックだから、それが分かるような名前にしてほしい。
メソッド名をcheckProductEditTypeに変更しました。

>>product_list.php
>>何か表が詰まってる気がしておかしいなと思ったら、白いエリアの幅が狭い気がする。
コンテナの幅を広げ、商品リストのテーブルの幅も広げました。

>>product_edit.php
>>24行目　空配列を$item[] = ''っていう形で作ってるけど、これでも初期化は出来てるとは思うが、$itemが空の配列、っていうよりは$itemっていう配列に空を入れた、って感じになってる。
$item = [];に変更しました。

>>45行目　画像登録はeditで完結する別機能で行われていて、edit→conf→doneの流れで登録するわけじゃないから、confで画像を確認しなくていい。
conf.phpでは画像の項目を削除しました。

>>70行目　foreachの中で$paymentを回した1個ずつが$payっていうのは名前の付け方が微妙かな、複数単数の関係になってるわけじゃないし・・・
>>$payじゃなくて簡単に$valでいいと思う。
複数箇所で$payで記述していたので$valに変更しました。

>>84行目　tableがinputの中に入ってるわけじゃないから、インデントがおかしい。
見落としていました。インデントを修正しました。

>>footer.phpにbodyとhtmlの閉じタグも含めていい。その場合script分の書く位置の調整は必要だけど。
footer.php内にbodyとhtmlの閉じタグを含めました。scriptはフッター上に記述しました。

>>product_conf.php
>>75行目　自分がこの書き方知らなかったんだけど、formmethod="POST"って必要？
必要なかったです。修正前に$_POST['cancel]で判定してたときの名残でした。つけなくてもPOSTでおくられていたので修正前のときにも必要なかったです。

>>product_done.php
>>36行目　confの登録ボタンもだけど、編集の場合は編集って文言になるように出し分けてほしい。
三項演算子でGETパラメータがupdateの時に編集、そうでなかった場合は新規登録となるよう修正しました。



>>util.inc.php
>>79行目　今度はproductがないから何のtypeだってなっちゃう。getかどうかは重要じゃないから、そこは省ける。
>>あと、オブジェクトを引数にしてるけど、メソッドの中でインスタンス化すればいいんじゃないかな。どうしても引数にした方がいいものじゃないと思うから。
メソッド名はご教示頂いたとおりcheckProductEditTypeに変更しました。
またメソッド内でProductをインスタンス化するように変更しました。

>>product_done.php
>>36行目　指摘して修正してもらった三項演算子のところ、他の＜？＝～？＞だと;がないから、付けなくてもいい。
見落としていました。product_conf.phpでも全く同じ記述をしていたのでそこも修正しました。