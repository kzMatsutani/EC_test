





//過去90日間のの売上データの取得
    public function getSalesList()
    {
        try {
            //データベースに接続
            parent::connect();
            $sql =
                ' SELECT '
                    . ' cl.date, '
                    . ' GROUP_CONCAT(distinct od.name separator "/") AS product_name , '
                    . ' SUM(od.num) AS total_num , '
                    . ' SUM(odr.shipping_price) AS total_shipping_price , '
                    . ' SUM(odr.sub_price) AS total_price '
                . ' FROM '
                    . ' calendar cl '
                . ' LEFT JOIN '
                    . ' `order` odr '
                . ' ON '
                    . ' odr.created_at LIKE CONCAT(cl.date, "%") '
                . ' LEFT JOIN '
                    . ' order_detail od '
                . ' ON '
                    . ' odr.id = od.order_id '
                . ' WHERE '
                    . ' cl.date < NOW() '
                . ' GROUP BY '
                    . ' cl.date '
                . ' ORDER BY '
                    . ' cl.date DESC '
                . ' LIMIT '
                    . ' 90 '
                ;

            $stmt = $this->dbh->query($sql);
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            return false;
        }
    }




$sql =
                ' SELECT '
                    . ' cl.date, '
                    . ' GROUP_CONCAT(distinct od.name separator ",") AS product_name , '
                    . ' SUM(od.num) AS total_num , '
                    . ' SUM(odr.shipping_price) AS total_shipping_price , '
                    . ' SUM(odr.sub_price) AS total_price '
                . ' FROM '
                    . ' calendar cl '
                . ' LEFT JOIN ( '
                    . ' SELECT '
                        . ' * '
                    . ' FROM '
                        . ' `order` odr '
                    . ' WHERE '
                        . ' delete_flg = 0 '
                . ' ) ON '
                    . ' odr.created_at LIKE CONCAT(cl.date, "%") '
                . ' LEFT JOIN '
                    . ' order_detail od '
                . ' ON '
                    . ' odr.id = od.order_id '
                . ' WHERE '
                    . ' cl.date BETWEEN ? AND ? '
                . ' AND '
                    . ' odr.delete_flg = 0 '
                . ' GROUP BY '
                    . ' cl.date '
                . ' ORDER BY '
                    . ' cl.date DESC '
            ;



            SELECT
                * FROM `order` odr WHERE delete_flg = 0;





                ' SELECT '
                     . ' cl.date, '
                     . ' GROUP_CONCAT(distinct od.name separator ",") AS product_name , '
                     . ' SUM(od.num) AS total_num , '
                     . ' SUM(odr.shipping_price) AS total_shipping_price , '
                     . ' SUM(odr.sub_price) AS total_price '
                 . ' FROM '
                     . ' calendar cl '
                 . ' LEFT JOIN ( '
                     . ' SELECT '
                         . ' * '
                     . ' FROM '
                         . ' `order` odr '
                     . ' WHERE '
                         . ' delete_flg = 0 '
                 . ' ) as odr '
                 . ' ON '
                     . ' odr.created_at LIKE CONCAT(cl.date, "%") '
                 . ' LEFT JOIN '
                     . ' order_detail od '
                 . ' ON '
                     . ' odr.id = od.order_id '
                 . ' WHERE '
                     . ' cl.date BETWEEN ? AND ? '
                 . ' AND '
                     . ' odr.delete_flg = 0 '
                 . ' GROUP BY '
                     . ' cl.date '
                 . ' ORDER BY '
                     . ' cl.date DESC '


SELECT
    cl.date,
    GROUP_CONCAT(distinct od.name separator ",") AS product_name,
    SUM(od.num) AS total_num,
    SUM(odr.shipping_price) AS total_shipping_price,
    SUM(odr.sub_price) AS total_price
FROM
    calendar cl
LEFT JOIN
    (
        SELECT
            *
        FROM
            `order` odr
        WHERE
            delete_flg = 0
    )
    ON  odr.created_at LIKE CONCAT(cl.date, "%")
    LEFT JOIN
        order_detail od
    ON  odr.id = od.order_id
WHERE
    cl.date BETWEEN ? AND ?
AND odr.delete_flg = 0
GROUP BY
    cl.date
ORDER BY
    cl.date DESC


$file = new SplFileObject($csv['tmp_name']);
        $file->setFlags(SplFileObject::READ_CSV);
        foreach ($file as $value) {
            $list[] = $value;
        }



    //CSVファイルを読み込み配列化
    public function readSalesManagementList($csv)
    {
        if ($csv['error'] == UPLOAD_ERR_NO_FILE || $csv['type'] != 'text/csv') {
            return '';
        }
        $file = new SplFileObject($csv['tmp_name']);
        $file->setFlags(SplFileObject::READ_CSV);

        foreach ($file as $value) {
            if (($value[0]) != '') {
                $list[] = $value;
            }
        }
        //最終行がエクセル用の合計値の場合は削除
        $column_count = count($list);
        if ($list[$column_count - 1][0] == '合計') {
            unset($list[$column_count - 1]);
        }
        return $list;
    }


//一ヶ月の売上データの取得(指定なしは今月までの取得)
    public function getSalesManagement($month)
    {
        try {
            //データベースに接続
            parent::connect();
            //月が指定されている場合はその月だけ、指定されていない場合は過去3ヶ月間の表示
            if (!empty($month)) {
                $end_month = date('Y-m-t', strtotime($month));
                $beginning_month = $month . '-01';
            } else {
                $end_month = date('Y-m-d', strtotime('today'));
                $beginning_month = date('Y-m-01', strtotime(date($end_month) . '-3 month'));
            }
            $sql =
                ' SELECT '
                    . ' cl.date , '
                    . ' GROUP_CONCAT(distinct od.name separator ",") AS product_name , '
                    . ' SUM(od.num) AS total_num , '
                    . ' SUM(odr.shipping_price) AS total_shipping_price , '
                    . ' SUM(odr.total_price) AS total_price '
                . ' FROM '
                    . ' calendar cl '
                . ' LEFT JOIN ( '
                    . ' SELECT '
                        . ' * '
                    . ' FROM '
                        . ' `order` odr '
                    . ' WHERE '
                        . ' delete_flg = 0 '
                . ' ) AS odr '
                . ' ON '
                    . ' odr.created_at LIKE CONCAT(cl.date , "%") '
                . ' LEFT JOIN '
                    . ' order_detail od '
                . ' ON '
                    . ' odr.id = od.order_id '
                . ' WHERE '
                    . ' cl.date BETWEEN ? AND ? '
                . ' GROUP BY '
                    . ' cl.date '
                . ' ORDER BY '
                    . ' cl.date DESC '
            ;
            $stmt = $this->dbh->prepare($sql);
            $stmt->execute([$beginning_month, $end_month]);
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            var_dump($e);
        }
    }


//行数のカウント(最終行に合計値を表示するために必要)
        $count = 2;
//最終行に合計を表示
        $csv .= "\n" . '合計, , =SUM(C2:C' . $count . '), =SUM(D2:D' . $count . '), =SUM(E2:E' . $count . ') ';

// if (!empty($sales_list)) {
    //     $sale->dlSalesManagementList($sales_list, $_POST['selected_month'] ?? '');
    // } else {
    //     //指定した月が空の場合はエラー文を返す
    //     $error = '※選択した月のデータはまだDBに登録されていません';
    // }



栗山さん

お疲れさまです。松谷です。
「課題4」の売上集計結果の表示とCSVダウンロードの実装が完了しましたのでご報告します。

■管理画面
https://extremesites.tokyo/training/tougan-matsutani/admin/sales_management_list.php

こちらの機能は日別の売上データを1ヶ月間単位で表示する機能です。
また表示されているデータをCSVファイルにてダウンロードすることも可能になっております。

初回訪問時は今月を表示しております。
入力フォームから表示する月を選択し「表示」ボタンを押すと該当月のデータを表示できるようになっております。
2020年以前は選択できないようになっております。
2022年以降はまだDBカレンダーテーブルの登録をしておりません。
また今月を表示している場合は本日までの集計を表示しております。今月をCSVファイルでダウンロードする場合も本日までのデータとなります。

集計しているデータはorderテーブルのdelete_flgが0の場合のみ集計しております。(delete_flgが1の場合は注文キャンセル想定)
カラム「商品名」は商品ごとに表示しますが、同ID商品の場合は一つにまとめて表示しております。
カラム「総額」すべての商品、送料も含めた金額を集計しております。

■行っているデバッグ
●入力フォームに2020年以前、又は2022年以降、未入力の場合の挙動
・2020年以前を直接入力して「表示」ボタンを押した場合はhtml機能からのエラー文「2020年1月以降の値を指定する必要があります。」と表示することを確認。
・現在DBに登録されていない2022年以降の値を入力した場合には本来集計データが表示される箇所に「データが見つかりませんでした」と表示することを確認。
・上記の2022年以降の入力を行い、「データが見つかりませんでした」が表示している時に「CSVダウンロード」ボタンを押すとエラー文「※選択した月のデータはまだDBに登録されていません」と表示することを確認。
・初回訪問時は入力フォームに今月が表示されていますが、年と月を未入力にして「表示」ボタンを押した場合は入力フォームの値を今月表記、データ集計も今月のデータを表示することを確認。
・入力フォームに年のみ、又は月のみの片方だけを入力した場合はhtml機能のエラー文「有効な値を入力してください。フィールドの値が不完全か、日付が無効です」と表示することを確認。

以上、よろしくお願い致します。


>>sales_,management_list.php
>>口頭でも伝えた通り、selected_monthっていうnameが微妙。購入年月を指定して検索するわけだから。それっぽいnameで。
>>あと、検索はGETの方がいい。
selected_monthからyear_monthに変更しました。
また検索をPOSTからGETに変更しました。
POST時はCSVファイル化を行う際にhiddenで年月の値を保持していましたが、GET変更により必要なくなったので該当のhidden箇所を削除しました。
